fn main() {
    let outer_string = "TCAGCCTTCCACGTCAGCCTTTCAGCCTTCAGCCTTGACTACAGCCTTTGACAGCCTTCCAGCCTTCAGCCTTGTGGCTTTACAGCCTTCCTCAGCCTTACGCCGACAGCCTTCAGCCTTACAGCCTTCATCCACCGCTACAGCCTTTGCAGCCTTTCACAGCCTTCAGCCTTCAGCCTTGCAGCCTTCAGCCTTGTTCACAGCCTTCATCAGCCTTATCTGCAGCCTTTTCGCAGCCTTCAGCCTTCCTGCCAGCCTTTGACAGCCTTCACAGCCTTGCAGCCTTGCACTGTTGCAGCCTTTAGCAGCCTTTTGATCAGCCTTGCAGCCTTTTGTCAGCCTTGCCAGCCTTGCCAGCCTTCAGCCTTGGCAGCCTTCACGCAGCCTTCCAGCCTTCCCCAGCCTTCAGCCTTCAGCCTTCGTGTTATTCAGCCTTCAGCCTTGACCAGCCTTAGTCAGCCTTCCAGCCTTTAAGGCCAGCCTTCAGCCTTCAGCCTTGAACCCAGCCTTCAGCCTTCAGCCTTCAACAGCCTTCAGCCTTTCAGCCTTCAGCCTTCCCAGCCTTCGAACAGCCTTGTCAGCCTTGGCAGCCTTCAGCCTTCCCAGCCTTACAGCCTTCACAGCCTTCAGCCTTCAGCCTTCGTAAACGGCAGCCTTATATCTACAGCCTTGCAGCCTTGCTTCAGCCTTCTCAGCCTTTACAAGCTCAGCCTTCCTCAGCCTTGCAGCCTTGATCCAGCCTTCAGCCTTGTTGAGGGCAGCTAGGCATCAGCCTTCAGCCTTCAGCCTTGCCCAGCCTTCAGCCTTGTGGTGTTATCCAGCCTTCCAACAGCCTTCAGCCTTCAGCCTTGGCCAGAGTCAGCCTTCCAGCCTTTCAGCCTTGACCCAGCCTTACAGCCTTCAGCCTTCATAAACCAGCCTTGGACAGCCTTAACAGCCTTGCAGCCTTCCAGCCTTACCAGCCTTCGAACAGCCTT";
    let inner_string = "CAGCCTTCA";
    let mut matching_indexes = Vec::new();

    for outer_index in range(0, outer_string.len()) {
    	let mut is_match = true;
    	for inner_index in range(0, inner_string.len()) {
    		if outer_index + inner_index >= outer_string.len() {
    			is_match = false;
    			break;
    		}

    		let outer_char = outer_string.char_at(outer_index + inner_index);
    		let inner_char = inner_string.char_at(inner_index);
    		if outer_char != inner_char {
    			is_match = false;
    			break;
    		}
    	}

    	if is_match {
    		matching_indexes.push(outer_index);
    	}
    }

    for value in matching_indexes.drain() {
    	print!("{} ", value + 1);
    }

    println!("");
}
